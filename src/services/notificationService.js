// Bildirim t√ºrleri
export const NOTIFICATION_TYPES = {
  RESERVATION_CREATED: 'reservation_created',
  RESERVATION_CONFIRMED: 'reservation_confirmed',
  RESERVATION_CANCELLED: 'reservation_cancelled',
  TOUR_REMINDER: 'tour_reminder',
  SYSTEM_MESSAGE: 'system_message'
};

// Bildirim servisi
class NotificationService {
  constructor() {
    this.notifications = this.loadNotificationsFromStorage();
    this.listeners = [];
  }

  // Bildirimleri localStorage'dan al
  loadNotificationsFromStorage() {
    try {
      const stored = localStorage.getItem('notifications');
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('Bildirimleri alma hatasƒ±:', error);
      return [];
    }
  }

  // Bildirimleri localStorage'a kaydet
  saveNotifications() {
    try {
      localStorage.setItem('notifications', JSON.stringify(this.notifications));
    } catch (error) {
      console.error('Bildirimleri kaydetme hatasƒ±:', error);
    }
  }

  // Yeni bildirim ekle
  addNotification(type, title, message, data = {}) {
    const notification = {
      id: Date.now() + Math.random(),
      type,
      title,
      message,
      data,
      timestamp: new Date().toISOString(),
      read: false
    };

    this.notifications.unshift(notification);
    
    // Maksimum 50 bildirim sakla
    if (this.notifications.length > 50) {
      this.notifications = this.notifications.slice(0, 50);
    }

    this.saveNotifications();
    this.notifyListeners();
    
    // Tarayƒ±cƒ± bildirimi g√∂ster (izin varsa)
    this.showBrowserNotification(title, message);
    
    return notification;
  }

  // Bildirimleri al
  getNotifications() {
    if (!this.notifications || !Array.isArray(this.notifications)) {
      this.notifications = [];
    }
    return this.notifications;
  }

  // Okunmamƒ±≈ü bildirim sayƒ±sƒ±nƒ± al
  getUnreadCount() {
    if (!this.notifications || !Array.isArray(this.notifications)) {
      return 0;
    }
    return this.notifications.filter(n => !n.read).length;
  }

  // Bildirimi okundu olarak i≈üaretle
  markAsRead(notificationId) {
    const notification = this.notifications.find(n => n.id === notificationId);
    if (notification) {
      notification.read = true;
      this.saveNotifications();
      this.notifyListeners();
    }
  }

  // T√ºm bildirimleri okundu olarak i≈üaretle
  markAllAsRead() {
    this.notifications.forEach(n => n.read = true);
    this.saveNotifications();
    this.notifyListeners();
  }

  // Bildirimi sil
  deleteNotification(notificationId) {
    this.notifications = this.notifications.filter(n => n.id !== notificationId);
    this.saveNotifications();
    this.notifyListeners();
  }

  // T√ºm bildirimleri sil
  clearAllNotifications() {
    this.notifications = [];
    this.saveNotifications();
    this.notifyListeners();
  }

  // Listener ekle
  addListener(callback) {
    this.listeners.push(callback);
    return () => {
      this.listeners = this.listeners.filter(l => l !== callback);
    };
  }

  // Listener'larƒ± bilgilendir
  notifyListeners() {
    this.listeners.forEach(callback => {
      try {
        callback(this.notifications, this.getUnreadCount());
      } catch (error) {
        console.error('Listener callback hatasƒ±:', error);
      }
    });
  }

  // Tarayƒ±cƒ± bildirimi g√∂ster
  showBrowserNotification(title, message) {
    if (!('Notification' in window)) {
      return;
    }

    // Sadece izin verilmi≈üse bildirim g√∂ster
    if (Notification.permission === 'granted') {
      try {
        new Notification(title, {
          body: message,
          icon: '/logo.png',
          badge: '/logo.png'
        });
      } catch (error) {
        console.log('Bildirim g√∂sterilemedi:', error);
      }
    }
    // ƒ∞zin reddedilmi≈üse veya default durumda hi√ßbir ≈üey yapma
  }

  // Bildirim izni iste (kullanƒ±cƒ± etkile≈üimi ile)
  requestPermission() {
    if (!('Notification' in window)) {
      return Promise.resolve('not-supported');
    }

    // Eƒüer zaten izin verilmi≈üse
    if (Notification.permission === 'granted') {
      return Promise.resolve('granted');
    }

    // Eƒüer reddedilmi≈üse tekrar sorma
    if (Notification.permission === 'denied') {
      return Promise.resolve('denied');
    }

    // Sadece default durumda izin iste
    return Notification.requestPermission().catch(() => 'denied');
  }

  // Rezervasyon bildirimleri
  notifyReservationCreated(tourTitle, tourDate, participants, totalPrice) {
    return this.addNotification(
      NOTIFICATION_TYPES.RESERVATION_CREATED,
      'üìÖ Yeni Rezervasyon',
      `${tourTitle} turu i√ßin rezervasyonunuz olu≈üturuldu. Tarih: ${tourDate}`,
      { tourTitle, tourDate, participants, totalPrice }
    );
  }

  notifyReservationConfirmed(tourTitle, tourDate) {
    return this.addNotification(
      NOTIFICATION_TYPES.RESERVATION_CONFIRMED,
      'üéâ Rezervasyon Onaylandƒ±',
      `${tourTitle} turu i√ßin rezervasyonunuz onaylandƒ±!`,
      { tourTitle, tourDate }
    );
  }

  notifyReservationCancelled(tourTitle, tourDate) {
    return this.addNotification(
      NOTIFICATION_TYPES.RESERVATION_CANCELLED,
      '‚ùå Rezervasyon ƒ∞ptal Edildi',
      `${tourTitle} turu i√ßin rezervasyonunuz iptal edildi.`,
      { tourTitle, tourDate }
    );
  }

  notifyTourReminder(tourTitle, tourDate, meetingPoint) {
    return this.addNotification(
      NOTIFICATION_TYPES.TOUR_REMINDER,
      '‚è∞ Tur Hatƒ±rlatmasƒ±',
      `Yarƒ±n ${tourTitle} turunuz var! Bulu≈üma noktasƒ±: ${meetingPoint}`,
      { tourTitle, tourDate, meetingPoint }
    );
  }

  notifySystemMessage(title, message) {
    return this.addNotification(
      NOTIFICATION_TYPES.SYSTEM_MESSAGE,
      title,
      message
    );
  }
}

// Singleton instance
const notificationService = new NotificationService();

export default notificationService; 